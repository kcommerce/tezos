sc_rollup_commitment_of_rollup_node_handles_chain_reorgs.out

./tezos-client --wait none originate sc rollup from '[PUBLIC_KEY_HASH]' of kind arith booting with  --burn-cap 9999999
Node is bootstrapped.
Estimated gas: 1600.696 units (will add 100 for safety)
Estimated storage: 6534 bytes added (will add 20 for safety)
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000402
    Expected counter: 1
    Gas limit: 1701
    Storage limit: 6554 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000402
      payload fees(the block proposer) ....... +ꜩ0.000402
    Originate smart contract rollup of kind arith with boot sector ''
      This smart contract rollup origination was successfully applied
      Consumed gas: 1600.696
      Storage size: 6534 bytes
      Address: [SC_ROLLUP_HASH]
      Balance updates:
        [PUBLIC_KEY_HASH] ... -ꜩ1.6335
        storage fees ........................... +ꜩ1.6335


./tezos-client rpc get '/chains/main/blocks/head/context/sc_rollup/[SC_ROLLUP_HASH]/initial_level'
2

./tezos-client --wait none send sc rollup message 'text:["CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.301 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000457
    Expected counter: 2
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000457
      payload fees(the block proposer) ....... +ꜩ0.000457
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1652.301
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 22
         current messages hash  = CoWCiKBE7uyrqCwVM1ZRQEXatHvkqQU9GPf94ktpjasEgkRgKst3
         nb_available_messages = 1
         nb_messages_in_commitment_period = 1
         starting_level_of_current_commitment_period = 22
         message_counter = 1
         old_levels_messages = 
       content = CoUkdBQ53N7FWav8LuTvrcp3jyoxnpqk3xnEo3gSCgNwia4fq44j
       index = 20
       back_pointers = CoUfuC6sQavMbyBDHr6zujymX6D6Wbo14aN69qCUCrc49hxJnPb3
      CoUfuC6sQavMbyBDHr6zujymX6D6Wbo14aN69qCUCrc49hxJnPb3
      CoUfuC6sQavMbyBDHr6zujymX6D6Wbo14aN69qCUCrc49hxJnPb3
      CoVs7qYHAiJBuPs36A7NMDo47y1nhL6mbdb2gEtMQi1zrBbRQzaX
      CoVs7qYHAiJBuPs36A7NMDo47y1nhL6mbdb2gEtMQi1zrBbRQzaX
    
    


./tezos-sc-rollup-client-alpha rpc get /last_stored_commitment
{ "compressed_state":
    "[SC_ROLLUP_STATE_HASH]",
  "inbox_level": 22,
  "predecessor": "[SC_ROLLUP_COMMITMENT_HASH]",
  "number_of_messages": 0, "number_of_ticks": 0 }

./tezos-sc-rollup-client-alpha rpc get /last_published_commitment
{ "compressed_state":
    "[SC_ROLLUP_STATE_HASH]",
  "inbox_level": 22,
  "predecessor": "[SC_ROLLUP_COMMITMENT_HASH]",
  "number_of_messages": 0, "number_of_ticks": 0 }
